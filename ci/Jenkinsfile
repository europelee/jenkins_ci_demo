#!groovy

node('master') {
    stage ('checkout') {
        checkout scm
    }
    stage ('build') {
        echo "build"
        echo "make distribution(like tar.gz rpm etc.)"
        //todo: make distribution
        //eg: generate jenkins_ci_demo_1.0.0-alpha.tar.gz
    }
    
    stage('SonarQube analysis') {
    // requires SonarQube Scanner 2.8+
    def scannerHome = tool 'sonar-scanner-3.0.3.778';
    withSonarQubeEnv('sonarqube-5.6.6') {
      sh "${scannerHome}/bin/sonar-scanner"
    }
    }
    stage ('alpha delivery') {
        echo "upload distribution to softrepo"
        //todo: upload distribution to softrepo
        //eg: scp jenkins_ci_demo_1.0.0-alpha.tar.gz to /opt/softrepo/third_party/jenkins_ci_demo/1.0.0 
    }
    stage ('deploy2qa_xm') {
        echo "deploy distribution to qa_xm dockers"
        //todo: deploy distribution to qa_xm dockers
        //eg: ssh -t -p 57891 root@1.1.1.1 "(wget ${jenkins_ci_demo_1.0.0-alpha_url}; run jenkins_ci_demo_1.0.0_deploy.sh)"
        def dl_cmd = "wget --no-check-certificate http://softrepo.qtlcdn.com/third_party/python/setuptools-28.8.0.tar.gz -O /opt/setuptools-28.8.0.tar.gz"
        def untar_cmd = "tar xvf /opt/setuptools-28.8.0.tar.gz -C /opt"
        def install_cmd = "(cd /opt/setuptools-28.8.0; python setup.py install)"
        sh "(${dl_cmd}; ${untar_cmd}; ${install_cmd})"
        def workspace = pwd()
        sh "(ls /usr/local/jenkins_ci_demo||mkdir /usr/local/jenkins_ci_demo;cp -r * /usr/local/jenkins_ci_demo/)"
        sh "(cd /usr/local/jenkins_ci_demo;python setup.py install)"
    }
    stage ('auto_test') {
        echo "auto_test"
        //todo: feature test, integration test
        //eg: run auto_test.sh
        def workspace = pwd()
        sh "(cd /usr/local/jenkins_ci_demo;py.test test/test_jenkins_ci_demo.py --html=${workspace}/coverage/test_result.html)"
        publishHTML (target: [
          allowMissing: false,
          alwaysLinkToLastBuild: false,
          keepAll: true,
          reportDir: 'coverage',
          reportFiles: 'test_result.html',
          reportName: "RCov Report"
        ]) 
    }
    stage ('beta build') {
        echo "beta build"
        //eg: generate jenkins_ci_demo_1.0.0-beta.tar.gz
        //eg: git tag jenkins_ci_demo_1.0.0-beta or branch 1.0.0
    }
    stage ('beta delivery') {
        echo "upload distribution to softrepo"
        //todo: upload distribution to softrepo
        //eg: scp jenkins_ci_demo_1.0.0-beta.tar.gz to /opt/softrepo/third_party/jenkins_ci_demo/1.0.0 
    }
    def did_timeout = false
    def did_input = true
    stage ('approvement') {
        try {
            timeout(time: 7, unit: 'DAYS') {
                def userInput = input(
                id: 'userInput', message: 'Do you want to deploy this build?', parameters: [
                [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Ticking this box will do a deployment', name: 'Deploy']
                ])
                env.ENV = userInput  
            }   
        } catch(err) { // timeout reached or input false
            def user = err.getCauses()[0].getUser()
            if('SYSTEM' == user.toString()) { // SYSTEM means timeout.
                didTimeout = true
            } else {
                echo "Aborted by: [${user}]"
            }
            did_input = false
        }   
    }
    if (did_input) {
        stage ('deploy2qa_uk') {
            echo "deploy distribution to qa_uk dockers"
            //todo: deploy distribution to qa_uk dockers
            //eg: ssh -t -p 57891 root@1.1.1.1 "(wget ${jenkins_ci_demo_1.0.0-beta_url}; run jenkins_ci_demo_1.0.0_deploy.sh)"
        }
    }
}
